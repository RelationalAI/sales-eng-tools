// *****************************************************************
// Sales Engineering Visualizations
//
// Tools for creating knowledge graphs and visualizations.
//
// INSTALL this source: kg.rel
// *****************************************************************

module se_kg

    // make knowledge graph (KG)
    // This function expects data model DATA and config META
    // to create corresponding KG
    @outline
    def make_knowledge_graph[DATA, META](entity_name in RelName, e in Entity) = 
            DATA(entity_rel, r, e, _) and
            META(entity_rel, :entity_name, entity_name)
            from r in RelName, entity_rel
    @outline
    def make_knowledge_graph[DATA, META](r in RelName, e1 in Entity, e2 in Entity, xs...) = 
            DATA(entity_rel, r, e1, e2, xs...) 
            from entity_rel

    // graph signature to compare graph topologies -
    // use equal[graph1, graph2] for exact match
    // @outline
    // module get_kg_signature[KG] 
    //     def node_count = 
    //     def edge_count = 
    //     def avg_degree = 
    //     def degree_stats = 
    // end

    // distill ontology 
    // This function expects 2 parameters
    // KG - knowledge graph defined as a module consisting of two types of relations: 
    //   1. entities: defined as 2-arity tuples (EntityName: relName, Hash: Entity)
    //   2. relationships: defined as 3+ arity tuples (RelationshipName: relName, Hash: Entity, Hash: Entity, optional attributes)
    // Then distill_kg_ontology builds an ontology based on entities and relationships above.
    // Example of KG module:
    //
    // module my_knowledge_graph
    //      def Company(e) = company:name(e, _)
    //      def Site(e) = site:id(e, _)
    //      def Workorder(e) = workorder:id(e, _)
    //
    //      def created_for(w, c) = workorder:company(w, c)
    //      def serviced_at(w, s) = workorder:site(w, s)
    // end
    @outline
    module distill_kg_ontology[KG, OPTS]
        def node = string[v] from v where KG(v, _)
        def edge = v1str, v2str: v1str=string[v1] and v2str=string[v2] and
                                KG(_, x, y, zs...) and KG(v1, x) and KG(v2, y) and
                                Entity(x) and Entity(y)
                                from x, y, v1, v2, zs...
        def edge_attribute = v1str, v2str, "label", estr: 
                                estr=string[e] and
                                v1str=string[v1] and v2str=string[v2] and
                                KG(e, x, y, zs...) and
                                KG(v1, x) and 
                                KG(v2, y)
                                from x, y, e, v1, v2, zs...

        def node_attribute[vs, "shape"] = shape_map[KG, OPTS][v], vs=string[v] from v where KG(v, _)
        def attribute[:graph, "label"] = "%(OPTS:graphviz:title <++ "Knowledge Graph") Ontology"
        def attribute[:graph, "labelloc"] = "t"
    end


    // Make ego-graph of KG
    // Ego graph begins seeds entities plus all entities that are distanced up to max_degree
    // jumps from them
    // add seed node(s) - degree 0
    @outline // @ondemand
    def _make_ego_kg[KG, seeds in Entity, max_degree in {0; 1; 2; 3; 4; 5; 6; 7;}]
            (ename in RelName, e in Entity, 0) = 
                                    KG(ename, e) and e=seeds
    // recursively add nodes - degree + 1 
    @outline // @ondemand
    def _make_ego_kg[KG, seeds in Entity, max_degree in {0; 1; 2; 3; 4; 5; 6; 7;}]
            (ename in RelName, e in Entity, deg in Int) = 
                                    KG(ename, e) and 
                                    (KG(_, le, e) or KG(_, e, le)) and 
                                    _make_ego_kg[KG, seeds, max_degree](_, le, pdeg) and 
                                    deg=pdeg+1 
                                    from le in Entity, pdeg in Int 
                                    where pdeg <= max_degree
    // add relations
    @outline // @ondemand
    def _make_ego_kg[KG, seeds in Entity, max_degree in {0; 1; 2; 3; 4; 5; 6; 7;}]
            (rel in RelName, e1 in Entity, e2 in Entity, xs...) = 
                                    KG(rel, e1, e2, xs...) and 
                                    _make_ego_kg[KG, seeds, max_degree](_, e1, _) and 
                                    _make_ego_kg[KG, seeds, max_degree](_, e2, _)

    // copy KG and remove distances 
    @outline
    def remove_distance[KG_with_distance](ename in RelName, e in Entity) = KG_with_distance(ename, e, deg) from deg in Int
    @outline
    def remove_distance[KG_with_distance](rel in RelName, e1 in Entity, e2 in Entity, xs...) = KG_with_distance(rel, e1, e2, xs...)


    // Make ego-graph of KG
    @outline
    def make_ego_kg[KG, seeds in Entity, max_degree in {0; 1; 2; 3; 4; 5; 6; 7;}] =
                                    remove_distance[_make_ego_kg[KG, seeds, max_degree]]

    
    // alternative version of make_ego_kg
    // must remove top :graph layer after getting results
    @outline //@ondemand
    module _make_ego_kg2[KG, seeds in Entity, max_degree in {0; 1; 2; 3; 4; 5; 6; 7;}]
        def graph(ename in RelName, e in Entity, 0) = KG(ename, e) and e=seeds
        def graph(ename in RelName, e in Entity, deg in Int) = KG(ename, e) and 
                                    (KG(_, le, e) or KG(_, e, le)) and 
                                    _make_ego_kg2[KG, seeds, max_degree](:graph, _, le, pdeg) and 
                                    deg=pdeg+1 
                                    from le in Entity, pdeg in Int 
                                    where pdeg <= max_degree
        def graph(rel in RelName, e1 in Entity, e2 in Entity) = KG(rel, e1, e2) and 
                                    _make_ego_kg2[KG, seeds, max_degree](:graph, _, e1, _) and 
                                    _make_ego_kg2[KG, seeds, max_degree](:graph, _, e2, _)
    end

    @outline 
    def make_ego_kg2[KG, seeds in Entity, max_degree in {0; 1; 2; 3; 4; 5; 6; 7;}] = 
                                   _make_ego_kg2[KG, seeds, max_degree][_]
    

    // Prepare Knowledge Graph for graphviz
    @outline
    module make_graphviz_object[KG, OPTS]
        def node(e in Entity) = KG(_, e)
        def edge(n1 in Entity, n2 in Entity) = KG(_, n1, n2, xs...) from xs...

        def node_attribute[n, "label"] = KG:show[n], node(n)

        // graphviz options
        def node_attribute[n, "shape"] = shape_map[KG, OPTS][t] from t where KG(t, n)

        def edge_attribute = x, y, "label", estr: 
                                estr=string[e] and
                                KG(e, x, y, zs...) and
                                OPTS:graphviz:label_edges(boolean_true)
                                from e, zs...
        
        def layout = OPTS:graphviz:layout <++ "dot" 
        def attribute:graph["rankdir"] = if layout="dot" then (OPTS:graphviz:direction <++ "LR") else {} end
        def attribute[:graph, "label"] = OPTS:graphviz:title <++ "Knowledge Graph"
        def attribute[:graph, "labelloc"] = "t"
    end

    // Auxiliary function to populate complete shape map 
    // based on options
    @inline
    def shape_map[KG, OPTS] =
        default_value[first[se_util:arity_filter[KG, 2]],
                    if se_util:exists_relname[OPTS, :graphviz] and 
                        se_util:exists_relname[OPTS:graphviz, :entity_shape]
                    then OPTS:graphviz:entity_shape 
                    else {} 
                    end, 
                    "box"]
end