// *****************************************************************
// Sales Engineering Query Library
//
// Tools for querying and poking around RAI database relations
//
// INSTALL this source: query.rel
// *****************************************************************

module se_query

    // Sample the first "limit" rows in relation "D".
    // Useful for exploring newly loaded CSV data.
    @outline
    def head[D, limit in Int] =
        table[c, row, v: lined_csv[D](c, row, v) and row <= limit]


    // Sample the last "limit" rows in relation "D".
    // Useful for exploring newly loaded CSV data.
    @outline
    def tail[D, limit in Int] =
    table[c, row, v: lined_csv[D](c, row, v) and
        row > count[x: D(_, x, _)] - limit]


    // Count rows in CSV data file
    @outline
    def rowcount[D] =
        count[row: lined_csv[D](_, row, _)]


    // Count attributes in CSV data file
    @outline
    def attrcount[D] =
        count[attr: lined_csv[D](attr, _, _)]


    // Display both count of rows and count of attributes (columns) in CSV data file
    @inline 
    def shape[D] =
        {:rows, rowcount[D];
         :cols, attrcount[D]}


    // helper function for `super_table`
    @outline
    def _make_table[R, Col_names](col_name,
                                row_i,
                                val) {
        pivot[Col_names](col_i, col_name) and
        pivot[sort[R][row_i]](col_i, val)
        from col_i
    }

    // print relation in table format
    // with specified custom column names
    // for now, the order of columns can't be controlled
    @outline
    def super_table[R, Col_names] = table[_make_table[R, Col_names]]


    // Combine values from multiple GNF columns
    // into single relation.
    // Duplicate tuples (values) are removed as this function
    // doesn't preserve neither GNF key nor
    // column names. But it does preserve arity of the values.
    @inline
    def union_multi_gnf_columns[R, ColNames] {
        {xs...: R(ColNames, _, xs...)}
    }
end