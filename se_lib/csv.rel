with se_util use apply

module se_csv

    @outline 
    def as_is_attributes[ID, DATA, META](attr, e, val) =
        ID(e, id) and
        DATA(META:key, row, id) and
        DATA(sym, row, val) and
        META:as_is_attr(sym) and
        (META:attr_alias_map[sym] <++ sym)(attr)
        from row, id, sym

    @outline 
    def parse_string_attributes[ID, DATA, META](attr, e, val) =
        ID(e, id) and
        DATA(META:key, row, id) and
        DATA(sym, row, val_str) and
        apply[META:string_attr[sym], val_str](val) and
        (META:attr_alias_map[sym] <++ sym)(attr)
        from row, id, sym, val_str
        
    @outline
    def parse_int_attributes[ID, DATA, META](attr, e, val) =
        ID(e, id) and
        DATA(META:key, row, id) and
        DATA(sym, row, int_str) and
        parse_int(int_str, val) and
        META:int_attr(sym) and
        (META:attr_alias_map[sym] <++ sym)(attr)
        from row, id, sym, int_str
    
    @outline
    def parse_date_attributes[ID, DATA, META](attr, e, val) = 
        ID(e, id) and
        DATA(META:key, row, id) and
        DATA(sym, row, date_str) and
        parse_date(date_str, df, val) and
        META:date_attr(sym, df) and
        (META:attr_alias_map[sym] <++ sym)(attr)
        from row, id, sym, date_str, df

    @outline
    def parse_datetime_attributes[ID, DATA, META](attr, e, val) = 
        ID(e, id) and
        DATA(META:key, row, id) and
        DATA(sym, row, datetime_str) and
        parse_datetime(datetime_str, df, val) and
        META:datetime_attr(sym, df) and
        (META:attr_alias_map[sym] <++ sym)(attr)
        from row, id, sym, datetime_str, df
    
    @outline
    def parse_float_attributes[ID, DATA, META](attr, e, val) = 
        ID(e, id) and
        DATA(META:key, row, id) and
        DATA(sym, row, float_str) and
        parse_float(float_str, val) and
        META:float_attr(sym) and
        (META:attr_alias_map[sym] <++ sym)(attr)
        from row, id, sym, float_str

    // parse_attributes - apply definitions for columns, their types, formats, and transformations
    // from the meta module to process and load CSV data file into data module
    // Example of meta module:
      // @inline def prepare_string[s in String] = uppercase[string_trim[s]]
      //
      // module cox_meta
      //   module vehicle
      //       def entity_name = :Vehicle
      //       def key = :VEHICLE_ID
      //       def as_is_attr = {
      //           :BIDDER_NAME; :WEB_LINK;
      //       }
      //       def string_attr = {
      //           (:MAKE, prepare_string); 
      //           (:MODEL, prepare_string); 
      //       }
      //       def int_attr = {
      //           :BIDS;
      //       }
      //       def float_attr = {
      //           :VEHICLE_MARKET_PRICE;
      //       }
      //       def date_attr = {
      //           (:SOLD_DATE, "Y-m-d");
      //       }
      //       def datetime_attr = {
      //           (:CREATE_DATE, "y-m-dTH:M:S.sss"); 
      //           (:LAST_ACCESS_DATE, "y-m-dTH:M:S.sss"); 
      //       }
      //       def attr_alias_map = {
      //           (:MAKE, :make);
      //           (:MODEL, :model);
      //           (:VEHICLE_MARKET_PRICE, :marketPrice);
      //           (:BIDDER_NAME, :bidderName);
      //           (:BIDS, :bidCount);
      //           (:WEB_LINK, :webLink);
      //           (:SOLD_DATE, :soldDate);
      //           (:CREATE_DATE, :createDate);
      //           (:LAST_ACCESS_DATE, :lastAccessDate);
      //       }
      //   end
      // end
    @inline
    def parse_attributes[ID, DATA, META](attr, e, val) = 
            as_is_attributes[ID, DATA, META](attr, e, val);
            parse_string_attributes[ID, DATA, META](attr, e, val);
            parse_int_attributes[ID, DATA, META](attr, e, val);
            parse_date_attributes[ID, DATA, META](attr, e, val);
            parse_datetime_attributes[ID, DATA, META](attr, e, val);
            parse_float_attributes[ID, DATA, META](attr, e, val)
    
    // @outline
    // def lookup_relation[relname, attr, ENTITY_GNF, DATA, REL_ENTITY_GNF](r, e, ue) = 
    //     ENTITY_GNF(:id, e, id) and
    //     DATA(mosaic_meta:account:key, row, id) and
    //     DATA(attr, row, userId) and
    //     REL_ENTITY_GNF(:id, ue, userId) and
    //     r = relname
    //     from row, id, userId

end